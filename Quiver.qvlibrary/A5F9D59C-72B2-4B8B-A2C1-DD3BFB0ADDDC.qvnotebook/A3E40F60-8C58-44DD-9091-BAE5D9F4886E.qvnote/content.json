{
  "title": "Apache Maven 外部依赖",
  "cells": [
    {
      "type": "text",
      "data": "<h2 style=\"margin: 0px 0px 10px; padding: 0.25em 0px 0px; color: rgb(0, 0, 0); line-height: 1.7; font-size: 16px; border-top-style: none; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Maven - 外部依赖</h2><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">现在，如你所知道的，Maven的依赖管理使用的是&nbsp;<a href=\"https://www.w3cschool.cn/maven/repositories.html\" style=\"margin: 0px; padding: 0px; color: rgb(144, 11, 9); outline: 0px; word-break: break-all;\"><strong style=\"margin: 0px; padding: 0px;\">Maven - 仓库</strong></a>&nbsp;的概念。但是如果在远程仓库和中央仓库中，依赖不能被满足，如何解决呢? Maven 使用外部依赖的概念来解决这个问题。</p><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">例如，让我们对在&nbsp;<a href=\"https://www.w3cschool.cn/maven/creating-project.html\" style=\"margin: 0px; padding: 0px; color: rgb(144, 11, 9); outline: 0px; word-break: break-all;\"><strong style=\"margin: 0px; padding: 0px;\">Maven - 创建工程</strong></a>&nbsp;部分创建的项目做以下修改：</p><ul style=\"margin: 10px 0px; padding: 0px 0px 0px 30px; list-style-position: outside; list-style-image: none; line-height: 1.7; color: rgb(0, 0, 0); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><li style=\"margin: 0px; padding: 0px;\">在 src 文件夹下添加 lib 文件夹</li><li style=\"margin: 0px; padding: 0px;\">复制任何 jar 文件到 lib 文件夹下。我们使用的是 ldapjdk.jar ，它是为 LDAP 操作的一个帮助库</li></ul><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">现在，我们的工程结构应该像下图一样：</p>"
    },
    {
      "type": "text",
      "data": "<img src=\"quiver-image-url/81873994FC484C8B92F1AAC49C3C431F.jpg\" alt=\"external-project-structure.jpeg\" width=\"200\" height=\"207\">"
    },
    {
      "type": "text",
      "data": "<p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">现在你有了自己的工程库（library），通常情况下它会包含一些任何仓库无法使用，并且 maven 也无法下载的 jar 文件。如果你的代码正在使用这个库，那么 Maven 的构建过程将会失败，因为在编译阶段它不能下载或者引用这个库。</p><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">为了处理这种情况，让我们用以下方式，将这个外部依赖添加到 maven&nbsp;<strong style=\"margin: 0px; padding: 0px;\">pom.xml</strong>&nbsp;中。</p>"
    },
    {
      "type": "code",
      "language": "xml",
      "data": "<dependency>\n             <groupId>ldapjdk</groupId>\n             <artifactId>ldapjdk</artifactId>\n             <scope>system</scope>\n             <version>1.0</version>\n             <systemPath>${basedir}\\src\\lib\\ldapjdk.jar</systemPath>\n          </dependency>"
    },
    {
      "type": "text",
      "data": "<p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">上例中，&nbsp;<code style=\"margin-right: 5px; margin-left: 5px; padding: 0px 4px; display: inline-block; background-color: rgb(249, 242, 244); font-size: 14px; color: rgb(199, 37, 78); font-family: Consolas, &quot;Courier New&quot;, Courier, monospace;\">&lt;dependencies&gt;</code>&nbsp;的第二个&nbsp;<code style=\"margin-right: 5px; margin-left: 5px; padding: 0px 4px; display: inline-block; background-color: rgb(249, 242, 244); font-size: 14px; color: rgb(199, 37, 78); font-family: Consolas, &quot;Courier New&quot;, Courier, monospace;\">&lt;dependency&gt;</code>&nbsp;元素 , 阐明了<strong style=\"margin: 0px; padding: 0px;\">外部依赖</strong>的关键概念。</p><ul style=\"margin: 10px 0px; padding: 0px 0px 0px 30px; list-style-position: outside; list-style-image: none; line-height: 1.7; color: rgb(0, 0, 0); font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><li style=\"margin: 0px; padding: 0px;\">外部依赖（library jar location）能够像其他依赖一样在 pom.xml 中配置。</li><li style=\"margin: 0px; padding: 0px;\">指定 groupId 为 library 的名称。</li><li style=\"margin: 0px; padding: 0px;\">指定 artifactId 为 library 的名称。</li><li style=\"margin: 0px; padding: 0px;\">指定作用域（scope）为系统。</li><li style=\"margin: 0px; padding: 0px;\">指定相对于工程位置的系统路径。</li></ul><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">希望现在你懂得了有关外部依赖的知识，你将能够在你的 Maven 工程中指定外部依赖。</p>"
    }
  ]
}