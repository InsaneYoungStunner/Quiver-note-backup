{
  "title": "Spring Bean 后置处理器",
  "cells": [
    {
      "type": "text",
      "data": "<h2 style=\"margin: 0px 0px 10px; padding: 0.25em 0px 0px; color: rgb(0, 0, 0); line-height: 1.7; font-size: 16px; border-top-style: none; font-family: Verdana, Arial, Helvetica, sans-serif; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">Spring——Bean 后置处理器</h2><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">BeanPostProcessor</strong>&nbsp;接口定义回调方法，你可以实现该方法来提供自己的实例化逻辑，依赖解析逻辑等。你也可以在 Spring 容器通过插入一个或多个 BeanPostProcessor 的实现来完成实例化，配置和初始化一个bean之后实现一些自定义逻辑回调方法。</p><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">你可以配置多个 BeanPostProcessor接口，通过设置 BeanPostProcessor 实现的&nbsp;<strong style=\"margin: 0px; padding: 0px;\">Ordered</strong>&nbsp;接口提供的&nbsp;<strong style=\"margin: 0px; padding: 0px;\">order</strong>&nbsp;属性来控制这些 BeanPostProcessor 接口的执行顺序。</p><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\">BeanPostProcessor 可以对 bean（或对象）实例进行操作，这意味着 Spring IoC 容器实例化一个 bean 实例，然后 BeanPostProcessor 接口进行它们的工作。</p><p style=\"margin: 0px 0px 5px; padding: 0px; word-wrap: break-word; color: rgb(0, 0, 0); line-height: 1.7; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 14px; font-variant-ligatures: normal; orphans: 2; widows: 2; background-color: rgb(255, 255, 255);\"><strong style=\"margin: 0px; padding: 0px;\">ApplicationContext</strong>&nbsp;会自动检测由&nbsp;<strong style=\"margin: 0px; padding: 0px;\">BeanPostProcessor</strong>&nbsp;接口的实现定义的 bean，注册这些 bean 为后置处理器，然后通过在容器中创建 bean，在适当的时候调用它。</p>"
    },
    {
      "type": "code",
      "language": "java",
      "data": "package com.tutorialspoint;\nimport org.springframework.beans.factory.config.BeanPostProcessor;\nimport org.springframework.beans.BeansException;\npublic class InitHelloWorld implements BeanPostProcessor {\n   public Object postProcessBeforeInitialization(Object bean, String beanName) throws BeansException {\n      System.out.println(\"BeforeInitialization : \" + beanName);\n      return bean;  // you can return any other object as well\n   }\n   public Object postProcessAfterInitialization(Object bean, String beanName) throws BeansException {\n      System.out.println(\"AfterInitialization : \" + beanName);\n      return bean;  // you can return any other object as well\n   }\n}"
    }
  ]
}